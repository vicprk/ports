/*
 * Generated by gdbus-codegen 2.60.6 from org.freedesktop.UPower.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __UP_DAEMON_GENERATED_H__
#define __UP_DAEMON_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.UPower */

#define UP_TYPE_EXPORTED_DAEMON (up_exported_daemon_get_type ())
#define UP_EXPORTED_DAEMON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_EXPORTED_DAEMON, UpExportedDaemon))
#define UP_IS_EXPORTED_DAEMON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_EXPORTED_DAEMON))
#define UP_EXPORTED_DAEMON_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UP_TYPE_EXPORTED_DAEMON, UpExportedDaemonIface))

struct _UpExportedDaemon;
typedef struct _UpExportedDaemon UpExportedDaemon;
typedef struct _UpExportedDaemonIface UpExportedDaemonIface;

struct _UpExportedDaemonIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_enumerate_devices) (
    UpExportedDaemon *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_critical_action) (
    UpExportedDaemon *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_display_device) (
    UpExportedDaemon *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_daemon_version) (UpExportedDaemon *object);

  gboolean  (*get_lid_is_closed) (UpExportedDaemon *object);

  gboolean  (*get_lid_is_present) (UpExportedDaemon *object);

  gboolean  (*get_on_battery) (UpExportedDaemon *object);

  void (*device_added) (
    UpExportedDaemon *object,
    const gchar *arg_device);

  void (*device_removed) (
    UpExportedDaemon *object,
    const gchar *arg_device);

};

GType up_exported_daemon_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *up_exported_daemon_interface_info (void);
guint up_exported_daemon_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void up_exported_daemon_complete_enumerate_devices (
    UpExportedDaemon *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *devices);

void up_exported_daemon_complete_get_display_device (
    UpExportedDaemon *object,
    GDBusMethodInvocation *invocation,
    const gchar *device);

void up_exported_daemon_complete_get_critical_action (
    UpExportedDaemon *object,
    GDBusMethodInvocation *invocation,
    const gchar *action);



/* D-Bus signal emissions functions: */
void up_exported_daemon_emit_device_added (
    UpExportedDaemon *object,
    const gchar *arg_device);

void up_exported_daemon_emit_device_removed (
    UpExportedDaemon *object,
    const gchar *arg_device);



/* D-Bus method calls: */
void up_exported_daemon_call_enumerate_devices (
    UpExportedDaemon *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_exported_daemon_call_enumerate_devices_finish (
    UpExportedDaemon *proxy,
    gchar ***out_devices,
    GAsyncResult *res,
    GError **error);

gboolean up_exported_daemon_call_enumerate_devices_sync (
    UpExportedDaemon *proxy,
    gchar ***out_devices,
    GCancellable *cancellable,
    GError **error);

void up_exported_daemon_call_get_display_device (
    UpExportedDaemon *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_exported_daemon_call_get_display_device_finish (
    UpExportedDaemon *proxy,
    gchar **out_device,
    GAsyncResult *res,
    GError **error);

gboolean up_exported_daemon_call_get_display_device_sync (
    UpExportedDaemon *proxy,
    gchar **out_device,
    GCancellable *cancellable,
    GError **error);

void up_exported_daemon_call_get_critical_action (
    UpExportedDaemon *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean up_exported_daemon_call_get_critical_action_finish (
    UpExportedDaemon *proxy,
    gchar **out_action,
    GAsyncResult *res,
    GError **error);

gboolean up_exported_daemon_call_get_critical_action_sync (
    UpExportedDaemon *proxy,
    gchar **out_action,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *up_exported_daemon_get_daemon_version (UpExportedDaemon *object);
gchar *up_exported_daemon_dup_daemon_version (UpExportedDaemon *object);
void up_exported_daemon_set_daemon_version (UpExportedDaemon *object, const gchar *value);

gboolean up_exported_daemon_get_on_battery (UpExportedDaemon *object);
void up_exported_daemon_set_on_battery (UpExportedDaemon *object, gboolean value);

gboolean up_exported_daemon_get_lid_is_closed (UpExportedDaemon *object);
void up_exported_daemon_set_lid_is_closed (UpExportedDaemon *object, gboolean value);

gboolean up_exported_daemon_get_lid_is_present (UpExportedDaemon *object);
void up_exported_daemon_set_lid_is_present (UpExportedDaemon *object, gboolean value);


/* ---- */

#define UP_TYPE_EXPORTED_DAEMON_PROXY (up_exported_daemon_proxy_get_type ())
#define UP_EXPORTED_DAEMON_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_EXPORTED_DAEMON_PROXY, UpExportedDaemonProxy))
#define UP_EXPORTED_DAEMON_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UP_TYPE_EXPORTED_DAEMON_PROXY, UpExportedDaemonProxyClass))
#define UP_EXPORTED_DAEMON_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UP_TYPE_EXPORTED_DAEMON_PROXY, UpExportedDaemonProxyClass))
#define UP_IS_EXPORTED_DAEMON_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_EXPORTED_DAEMON_PROXY))
#define UP_IS_EXPORTED_DAEMON_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UP_TYPE_EXPORTED_DAEMON_PROXY))

typedef struct _UpExportedDaemonProxy UpExportedDaemonProxy;
typedef struct _UpExportedDaemonProxyClass UpExportedDaemonProxyClass;
typedef struct _UpExportedDaemonProxyPrivate UpExportedDaemonProxyPrivate;

struct _UpExportedDaemonProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UpExportedDaemonProxyPrivate *priv;
};

struct _UpExportedDaemonProxyClass
{
  GDBusProxyClass parent_class;
};

GType up_exported_daemon_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UpExportedDaemonProxy, g_object_unref)
#endif

void up_exported_daemon_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UpExportedDaemon *up_exported_daemon_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UpExportedDaemon *up_exported_daemon_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void up_exported_daemon_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UpExportedDaemon *up_exported_daemon_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UpExportedDaemon *up_exported_daemon_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UP_TYPE_EXPORTED_DAEMON_SKELETON (up_exported_daemon_skeleton_get_type ())
#define UP_EXPORTED_DAEMON_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_EXPORTED_DAEMON_SKELETON, UpExportedDaemonSkeleton))
#define UP_EXPORTED_DAEMON_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UP_TYPE_EXPORTED_DAEMON_SKELETON, UpExportedDaemonSkeletonClass))
#define UP_EXPORTED_DAEMON_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UP_TYPE_EXPORTED_DAEMON_SKELETON, UpExportedDaemonSkeletonClass))
#define UP_IS_EXPORTED_DAEMON_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_EXPORTED_DAEMON_SKELETON))
#define UP_IS_EXPORTED_DAEMON_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UP_TYPE_EXPORTED_DAEMON_SKELETON))

typedef struct _UpExportedDaemonSkeleton UpExportedDaemonSkeleton;
typedef struct _UpExportedDaemonSkeletonClass UpExportedDaemonSkeletonClass;
typedef struct _UpExportedDaemonSkeletonPrivate UpExportedDaemonSkeletonPrivate;

struct _UpExportedDaemonSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UpExportedDaemonSkeletonPrivate *priv;
};

struct _UpExportedDaemonSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType up_exported_daemon_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UpExportedDaemonSkeleton, g_object_unref)
#endif

UpExportedDaemon *up_exported_daemon_skeleton_new (void);


G_END_DECLS

#endif /* __UP_DAEMON_GENERATED_H__ */
